<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>디스코드 봇 로그</title>
    <style>
        body {
            font-family: 'Consolas', 'Monaco', monospace;
            background-color: #282c34; /* 다크 모드 배경 */
            color: #abb2bf; /* 다크 모드 텍스트 색상 */
            margin: 0;
            padding: 20px;
            line-height: 1.4;
            display: flex;
            flex-direction: column;
            height: 100vh;
            box-sizing: border-box;
        }
        h1 {
            color: #61afef; /* 제목 색상 */
            margin-top: 0;
            margin-bottom: 20px;
        }
        #log-container {
            flex-grow: 1; /* 남은 공간을 모두 차지 */
            overflow-y: auto; /* 내용이 넘치면 스크롤 */
            border: 1px solid #3e4451; /* 테두리 */
            padding: 15px;
            background-color: #21252b; /* 로그 컨테이너 배경 */
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
            white-space: pre-wrap; /* 줄바꿈 유지 */
            word-break: break-all; /* 긴 단어 강제 줄바꿈 */
        }
        .log-entry {
            margin-bottom: 5px;
            padding-bottom: 5px;
            border-bottom: 1px dashed #3e4451; /* 로그 엔트리 구분선 */
        }
        .log-entry:last-child {
            border-bottom: none; /* 마지막 엔트리는 구분선 없음 */
        }
        /* 로그 레벨에 따른 색상 (Winston 기본 색상에 맞춰 대략적으로) */
        .log-entry[data-level="error"] { color: #e06c75; } /* 빨간색 */
        .log-entry[data-level="warn"] { color: #e5c07b; } /* 주황색 */
        .log-entry[data-level="info"] { color: #98c379; } /* 초록색 */
        .log-entry[data-level="debug"] { color: #c678dd; } /* 보라색 */
    </style>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body>
    <h1>디스코드 봇 로그</h1>
    <div id="log-container">
        <% logs.forEach(function(log) {
            // 로그 레벨을 파싱하여 data-level 속성으로 추가 (선택 사항)
            const levelMatch = log.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} (\w+):/);
            const level = levelMatch ? levelMatch[1].toLowerCase() : '';
        %>
            <div class="log-entry" data-level="<%= level %>"><%= log %></div>
        <% }); %>
    </div>

    <script>
        const socket = io(); // Socket.IO 클라이언트 연결
        const logContainer = document.getElementById('log-container');

        socket.on('newLog', (log) => {
            const newLogEntry = document.createElement('div');
            newLogEntry.className = 'log-entry';
            newLogEntry.textContent = log;

            // 로그 레벨에 따른 색상 적용 (선택 사항)
            const levelMatch = log.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2} (\w+):/);
            const level = levelMatch ? levelMatch[1].toLowerCase() : '';
            newLogEntry.setAttribute('data-level', level);

            // 새로운 로그를 맨 위에 추가 (최신 로그가 위로 올라옴)
            logContainer.prepend(newLogEntry);

            // 로그 컨테이너의 스크롤 위치를 맨 위로 유지 (선택 사항, 필요에 따라 주석 해제)
            // logContainer.scrollTop = 0;
        });

        socket.on('logError', (errorMessage) => {
            console.error("서버에서 로그 에러 수신:", errorMessage);
            // 사용자에게 에러 메시지를 표시할 수도 있습니다.
        });
    </script>
</body>
</html>